function lockKey(e) {
    if (event.shiftKey && 54 == event.keyCode || event.shiftKey && 186 == event.keyCode) return alert("입력할 수 없는 문자 입니다."), !1;
    if ($(document)
        .find("div")
        .hasClass("layer_header_title_pop") && 27 == event.keyCode && self.close(), null == e) {
        if (("INPUT" != event.srcElement || "TEXTAREA" != event.srcElement) && 8 == event.keyCode) return event.keyCode = 0, !1;
        if (116 == event.keyCode) return event.keyCode = 0, event.cancelBubble = !0, event.returnValue = !1, !1
    }
}

function fn_enterArea() {
    $("div.enterArea")
        .each(function () {
            var e = $(this)
                .find("input,select,checkbox")
                .not(".txtURead")
                , t = $(this)
                .find("input:enabled:visible,select:enabled:visible,checkbox:enabled:visible")
                .not(".txtURead");
            $(e)
                .removeClass("enterArea_children"), $(t)
                .addClass("enterArea_children")
        }), $("div.searchArea")
        .each(function () {
            var e = $(this)
                .find("input,select,checkbox")
                .not(".txtURead")
                , t = $(this)
                .find("input:enabled:visible,select:enabled:visible,checkbox:enabled:visible")
                .not(".txtURead");
            $(e)
                .removeClass("enterArea_children"), $(t)
                .addClass("enterArea_children")
        }), $(".enterArea_children")
        .unbind("keydown", enterEventHandler), $(".enterArea_children")
        .bind("keydown", enterEventHandler)
}

function fn_checkNumber(e, t) {
    return 8 == e.keyCode || 9 == e.keyCode || 13 == e.keyCode || 35 == e.keyCode || e.keyCode >= 35 && e.keyCode <= 39 || 45 == e.keyCode || 46 == e.keyCode || 144 == e.keyCode || 110 == e.keyCode || e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || ("number" == t || "decimal" == t || "currency" == t) && (189 == e.keyCode || 109 == e.keyCode) || ("decimal" == t || "currency" == t) && 190 == e.keyCode || "currency" == t && 188 == e.keyCode ? void 0 : !1
}

function setNUMformatter(obj) {
    "" == obj.value && (obj.value = "0"), obj.value = "" + eval(fn_replaceAll(obj.value, ",", ""))
}

function setAMTformatter(obj) {
    "" == obj.value && (obj.value = "0"), obj.value = "" + fn_appendComma(eval(fn_replaceAll(obj.value, ",", "")), 0)
}

function setDATEformatter(e) {
    e.value = fn_isDate(fn_replaceAll(e.value, "-", "")) ? "" + fn_getDateFormmat(fn_replaceAll(e.value, "-", "")) : ""
}

function setRATEformatter(obj) {
    "" == obj.value && (obj.value = "0.00"), obj.value = "" + fn_appendComma(eval(fn_replaceAll(obj.value, ",", "")), 2)
}

function setTIMEformatter(e) {
    var t = fn_replaceAll(e.value, ":", "");
    return 4 != t.length ? void(e.value = "00:00") : fn_IsTime(t + "00") ? void(e.value = t.substring(0, 2) + ":" + t.substring(2, 4)) : void(e.value = "00:00")
}

function setBubinformatter(e) {
    var t = e.value;
    t = 13 == t.length ? t.substring(0, 6) + "-" + t.substring(6, 13) : "", e.value = "" + t
}

function setBizformatter(e) {
    var t = e.value;
    t = 10 == t.length ? t.substring(0, 3) + "-" + t.substring(3, 5) + "-" + t.substring(5, 10) : "", e.value = "" + t
}

function setJuminformatter(e) {
    var t = e.value;
    t = 13 == t.length ? t.substring(0, 6) + "-" + t.substring(6, 13) : "", e.value = "" + t
}

function setRemoveformatter(e) {
    try {
        var t, n, a;
        e.value.indexOf(".") > -1 ? ("-" == e.value.substr(0, 1) ? (n = e.value.substr(1, e.value.indexOf(".")), t = "-") : (n = e.value.substr(0, e.value.indexOf(".") + 1), t = ""), a = e.value.substr(e.value.indexOf("."), e.value.length - e.value.indexOf("."))) : ("-" == e.value.substr(0, 1) ? (n = e.value.substr(1, e.value.length - 1), t = "-") : (n = e.value, t = ""), a = "");
        var i = /[^0-9]*/g;
        e.value = t + n.replace(i, "") + a, e.select()
    } catch (r) {
        log("setRemoveformatter Exception"), printStackTrace(r)
    }
}

function setRemoveDelimiter(e) {
    try {
        var t;
        t = e.value;
        var n = /[^0-9]*/g;
        e.value = t.replace(n, ""), e.select()
    } catch (a) {
        log("setRemoveDelimiter Exception"), printStackTrace(a)
    }
}

function InitalizeComboBox() {
    var e = "선택";
    $(".selU")
        .each(function () {
            var t = $(this);
            void 0 != $(t)
                .attr("comboid") && (e = void 0 != $(t)
                    .attr("nonevalue") ? $(t)
                    .attr("nonevalue") : "선택", $.ajax({
                        url: "/ERPWeb/common/ZEN_Common.ashx?a=GetComboList"
                        , data: {
                            CODE_ID: $(t)
                                .attr("comboid")
                        }
                        , type: "post"
                        , async: !1
                        , success: function (n) {
                            $(t)
                                .append('<option value="">' + e + "</option>");
                            for (var a = 0; a < n.returnValue.length; a++) $(t)
                                .append('<option value="' + n.returnValue[a].value + '">' + n.returnValue[a].name + "</option>")
                        }
                    }))
        })
}

function fn_datepicker() {
    $.datepicker.regional.ko = {
            closeText: "닫기"
            , prevText: "이전달"
            , nextText: "다음달"
            , currentText: "오늘"
            , monthNames: ["1월(JAN)", "2월(FEB)", "3월(MAR)", "4월(APR)", "5월(MAY)", "6월(JUN)", "7월(JUL)", "8월(AUG)", "9월(SEP)", "10월(OCT)", "11월(NOV)", "12월(DEC)"]
            , monthNamesShort: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"]
            , dayNames: ["일", "월", "화", "수", "목", "금", "토"]
            , dayNamesShort: ["일", "월", "화", "수", "목", "금", "토"]
            , dayNamesMin: ["일", "월", "화", "수", "목", "금", "토"]
            , weekHeader: "Wk"
            , firstDay: 0
            , changeYear: !0
            , changeMonth: !0
            , buttonImage: "/ERPWeb/image/b_calendar.gif"
            , buttonImageOnly: !0
            , showMonthAfterYear: !0
            , showAnim: "slide"
            , yearSuffix: ""
        }, $.datepicker.setDefaults($.datepicker.regional.ko), $(".txtUDate")
        .not(".txtURead")
        .datepicker({
            showOn: "button"
            , dateFormat: "yy-mm-dd"
        })
        .siblings("img")
        .css({
            "vertical-align": "middle"
            , margin: "0 0 0 3px"
        }), $(".txtUMonth")
        .not(".txtURead")
        .datepicker({
            showOn: "button"
            , dateFormat: "yy-mm"
        })
        .siblings("img")
        .css({
            "vertical-align": "middle"
            , margin: "0 0 0 3px"
        })
}

function fn_setMonth() {}

function fn_gridDatepicker(e, t) {
    $.datepicker.regional.ko = {
            closeText: "닫기"
            , prevText: "이전달"
            , nextText: "다음달"
            , currentText: "오늘"
            , monthNames: ["1월(JAN)", "2월(FEB)", "3월(MAR)", "4월(APR)", "5월(MAY)", "6월(JUN)", "7월(JUL)", "8월(AUG)", "9월(SEP)", "10월(OCT)", "11월(NOV)", "12월(DEC)"]
            , monthNamesShort: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"]
            , dayNames: ["일", "월", "화", "수", "목", "금", "토"]
            , dayNamesShort: ["일", "월", "화", "수", "목", "금", "토"]
            , dayNamesMin: ["일", "월", "화", "수", "목", "금", "토"]
            , weekHeader: "Wk"
            , dateFormat: t
            , firstDay: 0
            , changeYear: !0
            , changeMonth: !0
            , showMonthAfterYear: !0
            , constrainInput: !1
            , showOn: "both"
            , showAnim: "slide"
            , yearSuffix: ""
        }, $.datepicker.setDefaults($.datepicker.regional.ko), $(e)
        .datepicker()
}

function fn_preSearch() {
    var e = fn_getBoforeSearchCheck();
    if (!e) return !1;
    try {
        fn_Search()
    } catch (t) {}
}

function fn_preInit() {
    $(".gridList table")
        .each(function () {
            $("#" + $(this)
                    .attr("id"))
                .jqGrid("getGridParam", "cellEdit") && $("#" + $(this)
                    .attr("id"))
                .jqGrid("clearGridData", !0)
        }), fn_ClearArea(), $("div.enterArea")
        .each(function () {
            $(this)
                .find("input[type!=radio], select")
                .each(function () {
                    $(this)
                        .hasClass("txtUNumber") ? $(this)
                        .val("0") : $(this)
                        .hasClass("txtUCurrency") ? $(this)
                        .val("0") : $(this)
                        .hasClass("txtUDecimal") ? $(this)
                        .val("0") : $(this)
                        .hasClass("selU") ? $(this)
                        .find("option:first")
                        .prop("selected", "selected") : $(this)
                        .hasClass("txtUDate") ? void 0 != $(this)
                        .attr("compulsory") && $(this)
                        .val(__today) : $(this)
                        .hasClass("txtUMonth") ? void 0 != $(this)
                        .attr("compulsory") && $(this)
                        .val(__month) : $(this)
                        .hasClass("txtUYear") && void 0 != $(this)
                        .attr("compulsory") && $(this)
                        .val(__year)
                })
        }), $("div.tabU")
        .each(function () {
            var e = $(this)
                .attr("id")
                , t = $(this)
                .find("ul li>a")
                .first()
                .prop("href")
                , n = t.indexOf("#");
            if (-1 != n) {
                var a = t.substring(t.indexOf("#") + 1, t.length)
                    , i = $("." + e + "_current")
                    .attr("id");
                $("#" + i)
                    .hide(), $("#" + i)
                    .removeClass(e + "_current"), $("#" + a)
                    .addClass(e + "_current"), $("#" + a)
                    .show(), $(this)
                    .tabs({
                        active: 0
                    })
            }
        }), $("div.radioArea")
        .each(function () {
            $(this)
                .find("input:radio")
                .not(".txtURead")
                .first()
                .prop("checked", !0)
        }), $("div.enterArea")
        .first()
        .find("input, select")
        .not(".txtURead")
        .first()
        .focus();
    try {
        fn_Init()
    } catch (e) {}
}

function fn_preSave() {
    fn_setSaveMode();
    var e = fn_getBoforeSaveCheck();
    if (!e) return !1;
    try {
        fn_Save()
    } catch (t) {}
}

function fn_preDelete() {
    fn_setSaveMode();
    var e = Msgbox(2, "", "q6");
    if (void 0 == e) return !1;
    if (1 != e) return !1;
    try {
        fn_Delete()
    } catch (t) {}
}

function fn_prePrint() {
    try {
        fn_Print()
    } catch (e) {}
}

function fn_preExceldown() {
    fn_setSaveMode();
    try {
        fn_Exceldown()
    } catch (e) {}
}

function fn_preExcelup() {
    fn_setSaveMode();
    try {
        fn_Excelup()
    } catch (e) {}
}

function fn_preProc() {
    try {
        fn_Proc()
    } catch (e) {}
}

function fn_preClickTab(_tabsid, _tabpageid, _index) {
    try {
        eval(_tabsid + '_clickTab("' + _tabpageid + '","' + _index + '");')
    } catch (e) {}
}

function fn_setSaveMode() {
    $(".gridList")
        .find("table")
        .each(function () {
            var e = $(this)
                .attr("id");
            $(this)
                .jqGrid("getGridParam", "cellEdit") && fn_gridSetSaveMode(e)
        })
}

function fn_getBoforeSearchCheck() {
    var e = !0;
    return $("div.searchArea")
        .each(function () {
            return $(this)
                .find("input, select")
                .each(function () {
                    if (void 0 != $(this)
                        .attr("compulsory") && "" == fn_trim($(this)
                            .val())) {
                        e = !1;
                        var t = $(this)
                            .attr("compulsory");
                        if (Msgbox(1, "[ " + t + " ] 을(를) 선택 또는 입력 하세요.(필수)", "", ""), $(this)
                            .hasClass("txtURead")) {
                            var n = $(".enterArea_children")
                                .index($(this)[0]) + 1;
                            n < $(".enterArea_children")
                                .size() && $(".enterArea_children")
                                .get(n)
                                .focus()
                        } else $(this)
                            .focus();
                        return !1
                    }
                }), e ? void 0 : !1
        }), e
}

function fn_getBoforeSaveCheck() {
    var e = !0;
    return $("div.enterArea")
        .each(function () {
            return $(this)
                .find("input, select, textarea")
                .each(function () {
                    if (void 0 != $(this)
                        .attr("compulsory") && "" == fn_trim($(this)
                            .val())) {
                        e = !1;
                        var t = $(this)
                            .attr("compulsory");
                        if (Msgbox(1, "[ " + t + " ] 이(가) 입력되지 않습니다.(필수)", "", ""), $(this)
                            .hasClass("txtURead")) {
                            var n = $(".enterArea_children")
                                .index($(this)[0]) + 1;
                            n < $(".enterArea_children")
                                .size() && $(".enterArea_children")
                                .get(n)
                                .focus()
                        } else $(this)
                            .focus();
                        return !1
                    }
                }), e ? void 0 : !1
        }), e ? ($(".gridList")
            .find("table")
            .each(function () {
                var t = $(this)
                    .attr("id");
                return $(this)
                    .jqGrid("getGridParam", "cellEdit") && (e = fn_gridRequiredCheck(t), !e) ? !1 : void 0
            }), e) : !1
}

function fn_ClearArea() {
    $("div.enterArea")
        .each(function () {
            $(this)
                .find("input, select, textarea")
                .each(function () {
                    "radio" == $(this)
                        .attr("type") || "checkbox" == $(this)
                        .attr("type") ? $(this)
                        .attr("checked", !1) : $(this)
                        .val("")
                })
        })
}

function fn_ClearDisplayArea() {
    $("div.displayArea")
        .each(function () {
            $(this)
                .find("input, select, textarea")
                .each(function () {
                    "radio" == $(this)
                        .attr("type") || "checkbox" == $(this)
                        .attr("type") ? $(this)
                        .attr("checked", !1) : $(this)
                        .val("")
                })
        })
}

function fn_setRetrieveData(e) {
    $(".enterArea")
        .find("input[type!=radio], select, textarea")
        .each(function () {
            var t = $(this)
                .attr("id");
            $(this)
                .hasClass("txtUDate") ? $("#" + t)
                .val(fn_getDateFormmat(e[t])) : $(this)
                .hasClass("txtUMonth") ? $("#" + t)
                .val(fn_getDateFormmat(e[t])) : $(this)
                .hasClass("txtUCurrency") ? $("#" + t)
                .val(fn_appendComma(e[t], 0)) : $(this)
                .hasClass("txtUBubin") ? $("#" + t)
                .val(fn_getBubinFormmat(e[t])) : $(this)
                .hasClass("txtUBiz") ? $("#" + t)
                .val(fn_getBizFormmat(e[t])) : $(this)
                .hasClass("txtUJumin") ? $("#" + t)
                .val(fn_getJuminFormmat(e[t])) : "checkbox" == $(this)
                .attr("type") ? "1" == e[t] ? $("#" + t)
                .attr("checked", !0) : $("#" + t)
                .attr("checked", !1) : $("#" + t)
                .val(e[t])
        }), $(".enterArea .radioArea")
        .each(function () {
            var t = $(this)
                .find("input:radio:first")
                .attr("name");
            $("input:radio[name=" + t + "]:input[value=" + e[t] + "]")
                .attr("checked", !0)
        })
}
window.history.forward(0);
var __today = fn_getToday()
    , __month = __today.substring(0, 6)
    , __year = __today.substring(0, 4)
    , __gridGroupHeader = ""
    , __curGridname = ""
    , __clearyn = "";
__today = fn_getDateFormmat(__today), __month = fn_getDateFormmat(__month), document.onkeydown = function (e) {
        "undefined" != typeof e ? lockKey(e) : lockKey()
    }, $(document)
    .ready(function () {
        $("input[type!=radio].txtURead, textarea.txtURead")
            .each(function () {
                $(this)
                    .attr("readOnly", !0)
            }), $("select.txtURead, input[type=radio].txtURead")
            .each(function () {
                $(this)
                    .attr("disabled", !0)
            }), $("input.txtUNumber")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "number")
                    }), $(this)
                    .blur(function () {
                        setNUMformatter(this)
                    })
            }), $("input.txtUCurrency")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "currency")
                    }), $(this)
                    .blur(function () {
                        setAMTformatter(this)
                    }), $(this)
                    .focus(function () {
                        setRemoveformatter(this)
                    })
            }), $("input.txtUDecimal")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "decimal")
                    }), $(this)
                    .blur(function () {
                        setNUMformatter(this)
                    })
            }), $("input.txtUDate, input.txtUMonth")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "numeric")
                    }), $(this)
                    .blur(function () {
                        setDATEformatter(this)
                    }), $(this)
                    .hasClass("txtUDate") && ($(this)
                        .attr("maxlength", 8), $(this)
                        .val(__today)), $(this)
                    .hasClass("txtUMonth") && ($(this)
                        .attr("maxlength", 6), $(this)
                        .val(__month))
            }), $("input.txtUYear")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "number")
                    }), $(this)
                    .attr("maxlength", 4), $(this)
                    .hasClass("txtUYear") && $(this)
                    .val(__year)
            }), $("input.txtUTime")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "number")
                    }), $(this)
                    .blur(function () {
                        setTIMEformatter(this)
                    })
            }), $("input.txtUBubin, input.txtUBiz, input.txtUJumin")
            .each(function () {
                $(this)
                    .keydown(function (e) {
                        return fn_checkNumber(e, "numeric")
                    }), $(this)
                    .hasClass("txtUBubin") ? ($(this)
                        .attr("maxlength", 13), $(this)
                        .blur(function () {
                            setBubinformatter(this)
                        })) : $(this)
                    .hasClass("txtUBiz") ? ($(this)
                        .attr("maxlength", 10), $(this)
                        .blur(function () {
                            setBizformatter(this)
                        })) : ($(this)
                        .attr("maxlength", 13), $(this)
                        .blur(function () {
                            setJuminformatter(this)
                        })), $(this)
                    .focus(function () {
                        setRemoveDelimiter(this)
                    })
            }), $(function () {
                $(".tab_content")
                    .hide(), $(".tab_content:first")
                    .show(), $("ul.tabU li")
                    .click(function () {
                        var e = $("ul.tabU")
                            .attr("id")
                            , t = $("ul.tabU li")
                            .index(this);
                        $("ul.tabU li")
                            .removeClass("tab_on")
                            .addClass("tab_off"), $(this)
                            .removeClass("tab_off")
                            .addClass("tab_on"), $(".tab_content")
                            .hide();
                        var n = $(this)
                            .attr("rel");
                        $("#" + n)
                            .fadeIn(), fn_preClickTab(e, n, t)
                    })
            }), InitalizeComboBox(), fn_datepicker(), $("[id$=btnRead]")
            .click(function () {
                fn_preSearch()
            }), $("[id$=btnCreate]")
            .click(function () {
                fn_preInit()
            }), $("[id$=btnStore]")
            .click(function () {
                fn_preSave()
            }), $("[id$=btnDelete]")
            .click(function () {
                fn_preDelete()
            }), $("[id$=btnPrint]")
            .click(function () {
                fn_prePrint()
            }), $("[id$=btnExceldown]")
            .click(function () {
                fn_preExceldown()
            }), $("[id$=btnExcelup]")
            .click(function () {
                fn_preExcelup()
            }), $("[id$=btnProc]")
            .click(function () {
                fn_preProc()
            }), $("input")
            .focus(function () {
                $(this)
                    .select()
            }), fn_enterArea(), $("div.searchArea")
            .find("input[type!=checkbox], select")
            .not(".txtURead")
            .first()
            .focus()
    });
var enterEventHandler = function (e) {
    if (13 == e.keyCode) {
        if (void 0 != $(this)
            .attr("popupid") && fn_formPopup($(this)
                .attr("popupid")), void 0 != $(this)
            .attr("entersearch")) return fn_preSearch(), !1;
        if (void 0 != $(this)
            .attr("entersave")) return fn_preSave(), !1;
        var t = $(".enterArea_children")
            .index($(this)[0]);
        $(".enterArea_children")
            .get(t)
            .blur();
        var n = $(".enterArea_children")
            .index($(this)[0]) + 1;
        return n < $(".enterArea_children")
            .size() && $(".enterArea_children")
            .get(n)
            .focus(), !1
    }
    if (9 != e.keyCode && void 0 != $(this)
        .attr("relationfield"))
        for (var a = $(this)
                .attr("relationfield")
                .split("^"), i = 0; i < a.length; i++) $("#" + a[i])
            .val("")
};
